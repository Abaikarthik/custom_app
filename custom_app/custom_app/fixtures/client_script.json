[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Card",
  "enabled": 0,
  "modified": "2024-09-18 11:07:10.725472",
  "module": null,
  "name": "Job Card Employee Name",
  "script": "frappe.ui.form.on('Job Card', {\r\n    validate: function(frm) {\r\n        // Extract employee IDs from the child table\r\n        let employee_ids = frm.doc.employee.map(row => row.employee);\r\n\r\n        if (employee_ids.length > 0) {\r\n            // Fetch the employee names\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'Employee',\r\n                    filters: {\r\n                        'name': ['in', employee_ids]\r\n                    },\r\n                    fields: ['employee_name']\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        // Extract employee names\r\n                        let employee_names = r.message.map(emp => emp.employee_name);\r\n                        // Update the job_runners field with employee names\r\n                        frm.set_value('custom_job_runners', employee_names.join(', '));\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // If no employees selected, clear the job_runners field\r\n            frm.set_value('custom_job_runners', '');\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2024-08-23 15:42:23.043964",
  "module": "Custom App",
  "name": "Sales Person in Quotation",
  "script": "frappe.ui.form.on('Quotation', {\r\n    \r\n     onload: function(frm) {\r\n        if (frm.doc.transaction_date) {\r\n            // Add 7 days to the default or selected transaction date\r\n            let valid_till_date = frappe.datetime.add_days(frm.doc.transaction_date, 7);\r\n            // Set the valid_till field\r\n            frm.set_value('valid_till', valid_till_date);\r\n        }\r\n    },\r\n\r\n    transaction_date: function(frm) {\r\n        if (frm.doc.transaction_date) {\r\n            // Add 7 days to the selected date\r\n            let valid_till_date = frappe.datetime.add_days(frm.doc.transaction_date, 7);\r\n            // Set the valid_till field\r\n            frm.set_value('valid_till', valid_till_date);\r\n        }\r\n    },\r\n    \r\n    custom_sales_person: function(frm) {\r\n        if (frm.doc.custom_sales_person) {\r\n            // Fetch the Sales Person's Employee and related User details\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Sales Person\",\r\n                    name: frm.doc.custom_sales_person\r\n                },\r\n                callback: function(response) {\r\n                    var sales_person = response.message;\r\n                    if (sales_person && sales_person.employee) {\r\n                        // Fetch Employee details\r\n                        frappe.call({\r\n                            method: \"frappe.client.get\",\r\n                            args: {\r\n                                doctype: \"Employee\",\r\n                                name: sales_person.employee\r\n                            },\r\n                            callback: function(r) {\r\n                                var employee = r.message;\r\n                                if (employee && employee.user_id) {\r\n                                    // Fetch User details for email and contact number\r\n                                    frappe.call({\r\n                                        method: \"frappe.client.get\",\r\n                                        args: {\r\n                                            doctype: \"User\",\r\n                                            name: employee.user_id\r\n                                        },\r\n                                        callback: function(res) {\r\n                                            var user = res.message;\r\n                                            console.log('User Data:', user);\r\n                                            if (user) {\r\n                                                // Set email and mobile number in the Quotation fields\r\n                                                frm.set_value('custom_mobile_no', user.mobile_no || '');\r\n                                                frm.set_value('custom_email', user.email || '');\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-07-26 11:11:17.217314",
  "module": "Custom App",
  "name": "LUT",
  "script": "frappe.ui.form.on('Customer', {\r\n    refresh: function(frm) {\r\n        // Trigger the toggle function on form refresh\r\n        toggle_lut_fields(frm);\r\n    },\r\n    gst_category: function(frm) {\r\n        // Trigger the toggle function when GST category changes\r\n        toggle_lut_fields(frm);\r\n    }\r\n});\r\n\r\nfunction toggle_lut_fields(frm) {\r\n    if (frm.doc.gst_category === 'SEZ') {\r\n        // Show the custom fields if GST category is SEZ\r\n        frm.set_df_property('custom_lut_number', 'hidden', 0);\r\n        frm.set_df_property('custom_lut_document', 'hidden', 0);\r\n    } else {\r\n        // Hide the custom fields otherwise\r\n        frm.set_df_property('custom_lut_number', 'hidden', 1);\r\n        frm.set_df_property('custom_lut_document', 'hidden', 1);\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-08-05 15:07:20.700078",
  "module": "Custom App",
  "name": "Source of Supply",
  "script": "frappe.ui.form.on('Purchase Order', {\r\n    supplier_address: function(frm) {\r\n        if (frm.doc.supplier_address) {\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Address',\r\n                    name: frm.doc.supplier_address\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        frm.set_value('custom_source_of_supply', r.message.state);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            frm.set_value('custom_source_of_supply', '');\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2024-08-21 11:35:10.642209",
  "module": "Custom App",
  "name": "Sales Order No in DN",
  "script": "frappe.ui.form.on('Delivery Note', {\r\n    onload: function(frm) {\r\n        // Initialize an array to store unique Sales Order numbers\r\n        let sales_order_numbers = [];\r\n\r\n        // Loop through each item in the Delivery Note's item table\r\n        frm.doc.items.forEach(function(item) {\r\n            if (item.against_sales_order) {\r\n                // If Sales Order exists, fetch the Sales Order details\r\n                frappe.call({\r\n                    method: 'frappe.client.get',\r\n                    args: {\r\n                        doctype: 'Sales Order',\r\n                        name: item.against_sales_order\r\n                    },\r\n                    callback: function(r) {\r\n                        if (r.message) {\r\n                            // Add the Sales Order number to the array if not already added\r\n                            if (!sales_order_numbers.includes(r.message.name)) {\r\n                                sales_order_numbers.push(r.message.name);\r\n                            }\r\n\r\n                            // Find the corresponding Sales Order Item and set the custom_ordered_qty\r\n                            let sales_order_item = r.message.items.find(so_item => so_item.item_code === item.item_code);\r\n                            \r\n                            if (sales_order_item) {\r\n                                item.custom_ordered_qty = sales_order_item.qty;\r\n                                frm.refresh_field('items');  // Refresh the item table to reflect changes\r\n                            }\r\n\r\n                            // Set the custom_sales_order_no field with the joined Sales Order numbers\r\n                            frm.set_value('custom_sales_order_no', sales_order_numbers.join(', '));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    },\r\n    refresh: function(frm) {\r\n        // Populate the custom_sales_order_no field on refresh based on the items\r\n        let sales_order_numbers = frm.doc.items\r\n            .filter(item => item.against_sales_order)\r\n            .map(item => item.against_sales_order);\r\n\r\n        // Ensure no duplicate Sales Order numbers in the field\r\n        sales_order_numbers = [...new Set(sales_order_numbers)];\r\n        \r\n        // Set the custom_sales_order_no field\r\n        frm.set_value('custom_sales_order_no', sales_order_numbers.join(', '));\r\n    },\r\n    items_on_form_rendered: function(frm) {\r\n        // Ensure the custom_sales_order_no field is updated whenever the items table is rendered\r\n        frm.trigger('refresh');\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-09-18 11:06:41.893022",
  "module": "Custom App",
  "name": "Shipment Method from DC",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    before_submit: function(frm) {\r\n        if (frm.doc.delivery_note) {\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: {\r\n                    doctype: 'Delivery Note',\r\n                    filters: {\r\n                        name: frm.doc.delivery_note\r\n                    },\r\n                    fieldname: ['custom_shipment_method']\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message) {\r\n                        frm.set_value('custom_shipment_method', response.message.custom_shipment_method);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-09-18 11:02:07.179471",
  "module": "Custom App",
  "name": "Available Qty in Sales Order",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    refresh: function (frm) {\r\n        clear_custom_fields(frm);\r\n        update_item_selector_options(frm);\r\n    },\r\n    custom_item_selector: function (frm) {\r\n        let selected_item_code = frm.doc.custom_item_selector;\r\n        if (selected_item_code) {\r\n            fetch_item_stock_details(frm, selected_item_code);\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Sales Order Item', {\r\n    item_code: function (frm, cdt, cdn) {\r\n        update_item_details(frm, cdt, cdn);\r\n        update_item_selector_options(frm);\r\n    },\r\n    on_grid_row_selected: function (frm, cdt, cdn) {\r\n        update_item_details(frm, cdt, cdn);\r\n    },\r\n    items_remove: function(frm) {\r\n        update_item_selector_options(frm);\r\n    }\r\n});\r\n\r\n// Function to clear custom fields\r\nfunction clear_custom_fields(frm) {\r\n    frm.set_value('custom_available_qty_in_warehouse', 0);\r\n    frm.set_value('custom_total_qty_in_sales_orders', 0);\r\n    frm.set_value('custom_available_qty_in_ed_warehouse', 0);\r\n    frm.set_value('custom_availabale_qty_in_fg_warehouse', 0);\r\n    frm.set_value('custom_selected_item_code', '');\r\n}\r\n\r\n// Function to update item selector options\r\nfunction update_item_selector_options(frm) {\r\n    let item_codes = frm.doc.items.map(row => row.item_code).filter(Boolean);\r\n    frm.set_df_property('custom_item_selector', 'options', [''].concat(item_codes));\r\n}\r\n\r\n// Function to fetch stock details for the selected item\r\nfunction fetch_item_stock_details(frm, item_code) {\r\n    console.log(`Fetching details for item code: ${item_code}`);\r\n\r\n    // Fetch available quantity in the default warehouse\r\n    frappe.call({\r\n        method: 'frappe.client.get_value',\r\n        args: {\r\n            doctype: 'Bin',\r\n            filters: {\r\n                item_code: item_code,\r\n                warehouse: 'CH-HO - PLIPL' // Adjust based on your default warehouse field\r\n            },\r\n            fieldname: ['actual_qty', 'reserved_qty']\r\n        },\r\n        callback: function (r) {\r\n            if (r.message) {\r\n                let available_qty_in_warehouse = r.message.actual_qty || 0;\r\n                let allocated_qty = r.message.reserved_qty || 0;\r\n\r\n                frm.set_value('custom_available_qty_in_warehouse', available_qty_in_warehouse);\r\n                frm.set_value('custom_total_qty_in_sales_orders', allocated_qty);\r\n\r\n                console.log(`Warehouse CH-HO - PLIPL: Available qty: ${available_qty_in_warehouse}, Allocated qty: ${allocated_qty}`);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Fetch available quantity in ED-BR warehouse\r\n    frappe.call({\r\n        method: 'frappe.client.get_value',\r\n        args: {\r\n            doctype: 'Bin',\r\n            filters: {\r\n                item_code: item_code,\r\n                warehouse: 'ED-BR - PLIPL'\r\n            },\r\n            fieldname: 'actual_qty'\r\n        },\r\n        callback: function (r) {\r\n            if (r.message) {\r\n                let available_qty_in_ed_warehouse = r.message.actual_qty || 0;\r\n                frm.set_value('custom_available_qty_in_ed_warehouse', available_qty_in_ed_warehouse);\r\n\r\n                console.log(`Warehouse ED-BR - PLIPL: Available qty: ${available_qty_in_ed_warehouse}`);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Fetch available quantity in Finished Goods warehouse\r\n    frappe.call({\r\n        method: 'frappe.client.get_value',\r\n        args: {\r\n            doctype: 'Bin',\r\n            filters: {\r\n                item_code: item_code,\r\n                warehouse: 'Finished Goods - PLIPL'\r\n            },\r\n            fieldname: 'actual_qty'\r\n        },\r\n        callback: function (r) {\r\n            if (r.message) {\r\n                let available_qty_in_fg_warehouse = r.message.actual_qty || 0;\r\n                frm.set_value('custom_availabale_qty_in_fg_warehouse', available_qty_in_fg_warehouse);\r\n\r\n                console.log(`Warehouse Finished Goods - PLIPL: Available qty: ${available_qty_in_fg_warehouse}`);\r\n            }\r\n        }\r\n    });\r\n\r\n    frm.set_value('custom_selected_item_code', item_code);\r\n}\r\n\r\n// Function to update item details based on the selected row in the table\r\nfunction update_item_details(frm, cdt, cdn) {\r\n    let row = locals[cdt][cdn];\r\n\r\n    if (!row.item_code) {\r\n        clear_custom_fields(frm);\r\n        return;\r\n    }\r\n\r\n    fetch_item_stock_details(frm, row.item_code);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-09-18 11:05:11.634938",
  "module": "Custom App",
  "name": "sale Invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    refresh: function(frm, cdt, cdn) {\r\n    var row = locals[cdt][cdn];\r\n\t\tif (cint(frm.doc.docstatus===0) && cur_frm.page.current_view_name!==\"pos\" && !frm.doc.is_return) {\r\n\t        frm.add_custom_button(__('Sales Order'),\r\n\t        function() {\r\n\t\t\t\tif (!frm.doc.customer) {\r\n\t\t\t\t\tfrappe.throw({\r\n\t\t\t\t\t\ttitle: __(\"Mandatory\"),\r\n\t\t\t\t\t\tmessage: __(\"Please Select a Customer\")\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\terpnext.utils.map_current_doc({\r\n\t\t\t\t\tmethod: \"erpnext.selling.doctype.sales_order.sales_order.make_sales_invoice\",\r\n\t\t\t\t\tsource_doctype: \"Sales Order\",\r\n\t\t\t\t\ttarget: frm,\r\n\t\t\t\t\tsetters: {\r\n\t\t\t\t\t    transaction_date: null,\r\n\t\t\t\t\t\tcustomer: frm.doc.customer,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget_query_filters: {\r\n\t\t\t\t\t\tdocstatus: 1,\r\n\t\t\t\t\t\tstatus: [\"in\", [\"To Bill\"]],\r\n\t\t\t\t\t\tper_billed: [\"<\", 99.99],\r\n\t\t\t\t\t\tcompany: frm.doc.company,\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t        }, __(\"Get Items From\"));\r\n\t\t}\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-09-18 11:06:20.932636",
  "module": "Custom App",
  "name": "Sale Invoice Delivery Note",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    refresh: function(frm, cdt, cdn) {\r\n    var row = locals[cdt][cdn];\r\n\t\tif (cint(frm.doc.docstatus===0) && cur_frm.page.current_view_name!==\"pos\" && !frm.doc.is_return) {\r\n\t        frm.add_custom_button(__('Delivery Note'),\r\n\t        function() {\r\n\t\t\t\tif (!frm.doc.customer) {\r\n\t\t\t\t\tfrappe.throw({\r\n\t\t\t\t\t\ttitle: __(\"Mandatory\"),\r\n\t\t\t\t\t\tmessage: __(\"Please Select a Customer\")\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\terpnext.utils.map_current_doc({\r\n\t\t\t\t\tmethod: \"erpnext.stock.doctype.delivery_note.delivery_note.make_sales_invoice\",\r\n\t\t\t\t\tsource_doctype: \"Delivery Note\",\r\n\t\t\t\t\ttarget: frm,\r\n\t\t\t\t\tsetters: {\r\n\t\t\t\t\t    posting_date: null,\r\n\t\t\t\t\t\tcustomer: frm.doc.customer,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget_query_filters: {\r\n\t\t\t\t\t\tdocstatus: 1,\r\n\t\t\t\t\t\tstatus: [\"in\", [\"To Bill\"]],\r\n\t\t\t\t\t\tper_billed: [\"<\", 99.99],\r\n\t\t\t\t\t\tcompany: frm.doc.company,\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t        }, __(\"Get Items From\"));\r\n\t\t}\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-09-18 11:04:49.022139",
  "module": "Custom App",
  "name": "PO Details in Purchase Invoice",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm, cdt, cdn) {\n    var row = locals[cdt][cdn];\n\t\tif (cint(frm.doc.docstatus===0) && cur_frm.page.current_view_name!==\"pos\" && !frm.doc.is_return) {\n\t        frm.add_custom_button(__(\"Purchase Order\"),\n\t        function() {\n\t\t\t\tif (!frm.doc.supplier) {\n\t\t\t\t\tfrappe.throw({\n\t\t\t\t\t\ttitle: __(\"Mandatory\"),\n\t\t\t\t\t\tmessage: __(\"Please Select a Supplier\")\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\terpnext.utils.map_current_doc({\n\t\t\t\t\tmethod: \"erpnext.buying.doctype.purchase_order.purchase_order.make_purchase_invoice\",\n\t\t\t\t\tsource_doctype: \"Purchase Order\",\n\t\t\t\t\ttarget: frm,\n\t\t\t\t\tsetters: {\n\t\t\t\t\t    transaction_date: null,\n\t\t\t\t\t\tsupplier: frm.doc.supplier,\n\t\t\t\t\t},\n\t\t\t\t\tget_query_filters: {\n\t\t\t\t\t\tdocstatus: 1,\n\t\t\t\t\t\tstatus: [\"in\", [\"To Bill\"]],\n\t\t\t\t\t\tper_billed: [\"<\", 99.99],\n\t\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\t}\n\t\t\t\t});\n\t        }, __(\"Get Items From\"));\n\t\t}\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-09-18 11:04:39.722671",
  "module": "Custom App",
  "name": "PR Details in Purchase Invoice",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm, cdt, cdn) {\n    var row = locals[cdt][cdn];\n\t\tif (cint(frm.doc.docstatus===0) && cur_frm.page.current_view_name!==\"pos\" && !frm.doc.is_return) {\n\t        frm.add_custom_button(__(\"Purchase Receipt\"),\n\t        function() {\n\t\t\t\tif (!frm.doc.supplier) {\n\t\t\t\t\tfrappe.throw({\n\t\t\t\t\t\ttitle: __(\"Mandatory\"),\n\t\t\t\t\t\tmessage: __(\"Please Select a Supplier\")\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\terpnext.utils.map_current_doc({\n\t\t\t\t\tmethod: \"erpnext.stock.doctype.purchase_receipt.purchase_receipt.make_purchase_invoice\",\n\t\t\t\t\tsource_doctype: \"Purchase Receipt\",\n\t\t\t\t\ttarget: frm,\n\t\t\t\t\tsetters: {\n\t\t\t\t\t    posting_date: null,\n\t\t\t\t\t\tsupplier: frm.doc.supplier,\n\t\t\t\t\t},\n\t\t\t\t\tget_query_filters: {\n\t\t\t\t\t\tdocstatus: 1,\n\t\t\t\t\t\tstatus: [\"in\", [\"To Bill\"]],\n\t\t\t\t\t\tper_billed: [\"<\", 99.99],\n\t\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\t}\n\t\t\t\t});\n\t        }, __(\"Get Items From\"));\n\t\t}\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2024-09-18 11:05:54.587962",
  "module": "Custom App",
  "name": "Revised Date in Quotation",
  "script": "frappe.ui.form.on('Quotation', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.custom_revised_date || frm.doc.workflow_state === 'Revised') {\r\n            frm.set_df_property('custom_revised_date', 'hidden', 0);\r\n        } else {\r\n            frm.set_df_property('custom_revised_date', 'hidden', 1);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2024-09-18 11:05:41.886211",
  "module": "Custom App",
  "name": "Sales Person Contact in Delivery Note",
  "script": "frappe.ui.form.on('Delivery Note', {\r\n    refresh: function(frm) {\r\n        update_sales_person_contact(frm);\r\n    },\r\n    onload: function(frm) {\r\n        update_sales_person_contact(frm);\r\n    },\r\n    validate: function(frm) {\r\n        update_sales_person_contact(frm);\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Sales Team', {\r\n    sales_person: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        update_sales_person_contact(frm);\r\n    }\r\n});\r\n\r\nfunction update_sales_person_contact(frm) {\r\n    if (frm.doc.sales_team && frm.doc.sales_team.length > 0) {\r\n        let first_row = frm.doc.sales_team[0];\r\n\r\n        if (first_row.sales_person) {\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: {\r\n                    doctype: 'Sales Person',\r\n                    filters: {\r\n                        name: first_row.sales_person\r\n                    },\r\n                    fieldname: 'employee'\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.employee) {\r\n                        let employee = r.message.employee;\r\n\r\n                        frappe.call({\r\n                            method: 'frappe.client.get_value',\r\n                            args: {\r\n                                doctype: 'Employee',\r\n                                filters: {\r\n                                    name: employee\r\n                                },\r\n                                fieldname: 'cell_number' // Replace with the actual field name for the mobile number\r\n                            },\r\n                            callback: function(r) {\r\n                                if (r.message) {\r\n                                    let mobile_number = r.message.cell_number || '';\r\n                                    frm.set_value('custom_sales_person_contact', mobile_number);\r\n                                }\r\n                            },\r\n                            error: function(err) {\r\n                                console.error('Error fetching employee details:', err);\r\n                            }\r\n                        });\r\n                    }\r\n                },\r\n                error: function(err) {\r\n                    console.error('Error fetching Sales Person details:', err);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-09-18 11:05:32.140876",
  "module": "Custom App",
  "name": "PO List Status",
  "script": "frappe.listview_settings[\"Purchase Order\"] = {\r\n\tadd_fields: [\r\n\t\t\"base_grand_total\",\r\n\t\t\"company\",\r\n\t\t\"currency\",\r\n\t\t\"supplier\",\r\n\t\t\"supplier_name\",\r\n\t\t\"per_received\",\r\n\t\t\"per_billed\",\r\n\t\t\"status\",\r\n\t\t\"advance_payment_status\",\r\n\t],\r\n\tget_indicator: function (doc) {\r\n\t\tif (doc.status === \"Closed\") {\r\n\t\t\treturn [__(\"Closed\"), \"green\", \"status,=,Closed\"];\r\n\t\t} else if (doc.status === \"On Hold\") {\r\n\t\t\treturn [__(\"On Hold\"), \"orange\", \"status,=,On Hold\"];\r\n\t\t} else if (doc.status === \"Delivered\") {\r\n\t\t\treturn [__(\"Delivered\"), \"green\", \"status,=,Closed\"];\r\n\t\t} else if (doc.advance_payment_status == \"Initiated\") {\r\n\t\t\treturn [__(\"To Pay\"), \"gray\", \"advance_payment_status,=,Initiated\"];\r\n\t\t} else if (flt(doc.per_received, 2) < 100 && doc.status !== \"Closed\") {\r\n\t\t\tif (flt(doc.per_billed, 2) < 100) {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t__(\"To Receive and Bill\"),\r\n\t\t\t\t\t\"orange\",\r\n\t\t\t\t\t\"per_received,<,100|per_billed,<,100|status,!=,Closed\",\r\n\t\t\t\t];\r\n\t\t\t} else {\r\n\t\t\t\treturn [__(\"To Receive\"), \"orange\", \"per_received,<,100|per_billed,=,100|status,!=,Closed\"];\r\n\t\t\t}\r\n\t\t} else if (\r\n\t\t\tflt(doc.per_received, 2) >= 100 &&\r\n\t\t\tflt(doc.per_billed, 2) < 100 &&\r\n\t\t\tdoc.status !== \"Closed\"\r\n\t\t) {\r\n\t\t\treturn [__(\"To Bill\"), \"orange\", \"per_received,=,100|per_billed,<,100|status,!=,Closed\"];\r\n\t\t} else if (\r\n\t\t\tflt(doc.per_received, 2) >= 100 &&\r\n\t\t\tflt(doc.per_billed, 2) == 100 &&\r\n\t\t\tdoc.status !== \"Closed\"\r\n\t\t) {\r\n\t\t\treturn [__(\"Completed\"), \"green\", \"per_received,=,100|per_billed,=,100|status,!=,Closed\"];\r\n\t\t}\r\n\t},\r\n\tonload: function (listview) {\r\n\t\tvar method = \"erpnext.buying.doctype.purchase_order.purchase_order.close_or_unclose_purchase_orders\";\r\n\r\n\t\tlistview.page.add_menu_item(__(\"Close\"), function () {\r\n\t\t\tlistview.call_for_selected_items(method, { status: \"Closed\" });\r\n\t\t});\r\n\r\n\t\tlistview.page.add_menu_item(__(\"Reopen\"), function () {\r\n\t\t\tlistview.call_for_selected_items(method, { status: \"Submitted\" });\r\n\t\t});\r\n\r\n\t\tlistview.page.add_action_item(__(\"Purchase Invoice\"), () => {\r\n\t\t\terpnext.bulk_transaction_processing.create(listview, \"Purchase Order\", \"Purchase Invoice\");\r\n\t\t});\r\n\r\n\t\tlistview.page.add_action_item(__(\"Purchase Receipt\"), () => {\r\n\t\t\terpnext.bulk_transaction_processing.create(listview, \"Purchase Order\", \"Purchase Receipt\");\r\n\t\t});\r\n\r\n\t\tlistview.page.add_action_item(__(\"Advance Payment\"), () => {\r\n\t\t\terpnext.bulk_transaction_processing.create(listview, \"Purchase Order\", \"Payment Entry\");\r\n\t\t});\r\n\t},\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 0,
  "modified": "2024-08-27 11:14:03.757843",
  "module": null,
  "name": "Quotation List",
  "script": "frappe.listview_settings[\"Quotation\"] = {\r\n\tadd_fields: [\"customer_name\", \"base_grand_total\", \"status\", \"company\", \"currency\", \"valid_till\"],\r\n\r\n\tonload: function (listview) {\r\n\t\tif (listview.page.fields_dict.quotation_to) {\r\n\t\t\tlistview.page.fields_dict.quotation_to.get_query = function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tfilters: {\r\n\t\t\t\t\t\tname: [\"in\", [\"Customer\", \"Lead\"]],\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tlistview.page.add_action_item(__(\"Sales Order\"), () => {\r\n\t\t\terpnext.bulk_transaction_processing.create(listview, \"Quotation\", \"Sales Order\");\r\n\t\t});\r\n\r\n\t\tlistview.page.add_action_item(__(\"Sales Invoice\"), () => {\r\n\t\t\terpnext.bulk_transaction_processing.create(listview, \"Quotation\", \"Sales Invoice\");\r\n\t\t});\r\n\t},\r\n\r\n\tget_indicator: function (doc) {\r\n\t\tif (doc.status === \"Open\") {\r\n\t\t\treturn [__(\"Open\"), \"orange\", \"status,=,Open\"];\r\n\t\t} else if (doc.status === \"Partially Ordered\") {\r\n\t\t\treturn [__(\"Partially Ordered\"), \"yellow\", \"status,=,Partially Ordered\"];\r\n\t\t} else if (doc.status === \"Ordered\") {\r\n\t\t\treturn [__(\"Ordered\"), \"green\", \"status,=,Ordered\"];\r\n\t\t} else if (doc.status === \"Lost\") {\r\n\t\t\treturn [__(\"Lost\"), \"gray\", \"status,=,Lost\"];\r\n\t\t} else if (doc.status === \"Expired\") {\r\n\t\t\treturn [__(\"Expired\"), \"gray\", \"status,=,Expired\"];\r\n\t\t}\r\n\t},\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-27 13:36:27.171231",
  "module": null,
  "name": "SO WorkOrder",
  "script": "frappe.ui.form.on('Sales Order', {\n\trefresh:function (frm) {\n\tvar row = locals[cdt][cdn];\n\t\t frm.add_custom_button(\n\t\t\t\t\t\t\t\t__(\"Work Order\"),\n\t\t\t\t\t\t\t\t() => make_work_order(frm),\n\t\t\t\t\t\t\t\t__(\"Create\")\n\t\t\t\t\t\t\t);\n\t}\n})\n\n\nfunction make_work_order(frm) {\n\t\tvar me = frm;\n\t\tme.frm.call({\n\t\t\tmethod: \"erpnext.selling.doctype.sales_order.sales_order.get_work_order_items\",\n\t\t\targs: {\n\t\t\t\tsales_order: this.frm.docname,\n\t\t\t},\n\t\t\tfreeze: true,\n\t\t\tcallback: function (r) {\n\t\t\t\tif (!r.message) {\n\t\t\t\t\tfrappe.msgprint({\n\t\t\t\t\t\ttitle: __(\"Work Order not created\"),\n\t\t\t\t\t\tmessage: __(\"No Items with Bill of Materials to Manufacture\"),\n\t\t\t\t\t\tindicator: \"orange\",\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tconst fields = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: \"Items\",\n\t\t\t\t\t\t\tfieldtype: \"Table\",\n\t\t\t\t\t\t\tfieldname: \"items\",\n\t\t\t\t\t\t\tdescription: __(\"Select BOM and Qty for Production\"),\n\t\t\t\t\t\t\tfields: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfieldtype: \"Read Only\",\n\t\t\t\t\t\t\t\t\tfieldname: \"item_code\",\n\t\t\t\t\t\t\t\t\tlabel: __(\"Item Code\"),\n\t\t\t\t\t\t\t\t\tin_list_view: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfieldtype: \"Link\",\n\t\t\t\t\t\t\t\t\tfieldname: \"bom\",\n\t\t\t\t\t\t\t\t\toptions: \"BOM\",\n\t\t\t\t\t\t\t\t\treqd: 1,\n\t\t\t\t\t\t\t\t\tlabel: __(\"Select BOM\"),\n\t\t\t\t\t\t\t\t\tin_list_view: 1,\n\t\t\t\t\t\t\t\t\tget_query: function (doc) {\n\t\t\t\t\t\t\t\t\t\treturn { filters: { item: doc.item_code } };\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfieldtype: \"Float\",\n\t\t\t\t\t\t\t\t\tfieldname: \"pending_qty\",\n\t\t\t\t\t\t\t\t\treqd: 1,\n\t\t\t\t\t\t\t\t\tlabel: __(\"Qty\"),\n\t\t\t\t\t\t\t\t\tin_list_view: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfieldtype: \"Data\",\n\t\t\t\t\t\t\t\t\tfieldname: \"sales_order_item\",\n\t\t\t\t\t\t\t\t\treqd: 1,\n\t\t\t\t\t\t\t\t\tlabel: __(\"Sales Order Item\"),\n\t\t\t\t\t\t\t\t\thidden: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tdata: r.message,\n\t\t\t\t\t\t\tget_data: () => {\n\t\t\t\t\t\t\t\treturn r.message;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t];\n\t\t\t\t\tvar d = new frappe.ui.Dialog({\n\t\t\t\t\t\ttitle: __(\"Select Items to Manufacture test\"),\n\t\t\t\t\t\tfields: fields,\n\t\t\t\t\t\tprimary_action: function () {\n\t\t\t\t\t\t\tvar data = { items: d.fields_dict.items.grid.get_selected_children() };\n\t\t\t\t\t\t\tif (!data) {\n\t\t\t\t\t\t\t\tfrappe.throw(__(\"Please select items\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tme.frm.call({\n\t\t\t\t\t\t\t\tmethod: \"make_work_orders\",\n\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\titems: data,\n\t\t\t\t\t\t\t\t\tcompany: me.frm.doc.company,\n\t\t\t\t\t\t\t\t\tsales_order: me.frm.docname,\n\t\t\t\t\t\t\t\t\tproject: me.frm.project,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfreeze: true,\n\t\t\t\t\t\t\t\tcallback: function (r) {\n\t\t\t\t\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\t\t\t\t\tfrappe.msgprint({\n\t\t\t\t\t\t\t\t\t\t\tmessage: __(\"Work Orders Created: {0}\", [\n\t\t\t\t\t\t\t\t\t\t\t\tr.message\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map(function (d) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn repl(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'<a href=\"/app/work-order/%(name)s\">%(name)s</a>',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ name: d }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t.join(\", \"),\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\tindicator: \"green\",\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\td.hide();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprimary_action_label: __(\"Create\"),\n\t\t\t\t\t});\n\t\t\t\t\td.show();\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-09-18 11:04:24.377892",
  "module": "Custom App",
  "name": "Comma Seperator",
  "script": "frappe.ui.form.on('Purchase Receipt', {\r\n    refresh: function(frm) {\r\n        // Add a custom button named \"Enter Serial Numbers\"\r\n        frm.add_custom_button(__('Enter Serial Numbers'), function() {\r\n            // Create a dialog for entering serial numbers\r\n            const d = new frappe.ui.Dialog({\r\n                title: 'Enter Serial Numbers',\r\n                fields: [\r\n                    {\r\n                        label: 'Serial Numbers',\r\n                        fieldname: 'serial_numbers',\r\n                        fieldtype: 'Text',\r\n                        description: 'Enter serial numbers separated by commas.',\r\n                    },\r\n                    {\r\n                        label: 'Separate',\r\n                        fieldname: 'separate',\r\n                        fieldtype: 'Button'\r\n                    }\r\n                ],\r\n                primary_action_label: 'Submit',\r\n                primary_action(values) {\r\n                    // Do something with the separated serial numbers, if needed\r\n                    frappe.msgprint(`Serial Numbers Separated Successfully!`);\r\n                    d.hide();\r\n                }\r\n            });\r\n\r\n            // Set up the 'Separate' button action\r\n            d.fields_dict.separate.$input.click(function() {\r\n                // Get the input serial numbers\r\n                const serialNumbers = d.get_value('serial_numbers');\r\n                if (serialNumbers) {\r\n                    // Split the serial numbers by comma and trim whitespace\r\n                    const separatedSerials = serialNumbers.split(',').map(s => s.trim());\r\n\r\n                    // Display the separated serial numbers line by line\r\n                    d.set_value('serial_numbers', separatedSerials.join('\\n'));\r\n                } else {\r\n                    frappe.msgprint(__('Please enter serial numbers.'));\r\n                }\r\n            });\r\n\r\n            // Show the dialog\r\n            d.show();\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2024-09-18 11:03:14.239144",
  "module": "Custom App",
  "name": "Warehouse in MR",
  "script": "frappe.ui.form.on('Material Request', {\r\n    set_from_warehouse: function(frm) {\r\n        if (frm.doc.set_from_warehouse) {\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Warehouse\",\r\n                    name: frm.doc.set_from_warehouse\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        let warehouse = r.message;\r\n                        let full_address = (warehouse.address_line_1 ? warehouse.address_line_1 + \", \" : \"\") +\r\n                                           (warehouse.address_line_2 ? warehouse.address_line_2 + \", \" : \"\") +\r\n                                           (warehouse.city ? warehouse.city + \", \" : \"\") +\r\n                                           (warehouse.state ? warehouse.state + \", \" : \"\") +\r\n                                           (warehouse.pin ? \"PIN: \" + warehouse.pin : \"\");\r\n                        frm.set_value('custom_source_warehouse_address', full_address);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n    set_warehouse: function(frm) {\r\n        if (frm.doc.set_warehouse) {\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Warehouse\",\r\n                    name: frm.doc.set_warehouse\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        let warehouse = r.message;\r\n                        let full_address = (warehouse.address_line_1 ? warehouse.address_line_1 + \", \" : \"\") +\r\n                                           (warehouse.address_line_2 ? warehouse.address_line_2 + \", \" : \"\") +\r\n                                           (warehouse.city ? warehouse.city + \", \" : \"\") +\r\n                                           (warehouse.state ? warehouse.state + \", \" : \"\") +\r\n                                           (warehouse.pin ? \"PIN: \" + warehouse.pin : \"\");\r\n                        frm.set_value('custom_target_warehouse_address', full_address);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-09-18 11:03:00.181772",
  "module": "Custom App",
  "name": "PR Serial number validation",
  "script": "frappe.ui.form.on('Purchase Receipt Item', {\r\n    serial_no: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        let serial_no_count = row.serial_no ? row.serial_no.split('\\n').length : 0;\r\n        let accepted_qty = row.qty;\r\n\r\n        if (serial_no_count < accepted_qty) {\r\n            frappe.msgprint({\r\n                title: __('Warning'),\r\n                indicator: 'orange',\r\n                message: __('You have entered {0} serial numbers, but the quantity is {1}. Please make sure they match.', [serial_no_count, accepted_qty])\r\n            });\r\n        } else if (serial_no_count > accepted_qty) {\r\n            frappe.msgprint({\r\n                title: __('Warning'),\r\n                indicator: 'orange',\r\n                message: __('You have entered more serial numbers ({0}) than the quantity ({1}). Please check your entries.', [serial_no_count, accepted_qty])\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-09-18 11:02:50.672293",
  "module": "Custom App",
  "name": "Available Qty in PO",
  "script": "frappe.ui.form.on('Purchase Order', {\r\n    refresh: function(frm) {\r\n        // Clear custom fields when refreshing the Purchase Order form if needed\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Purchase Order Item', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        update_item_details(frm, cdt, cdn);\r\n    },\r\n    on_grid_row_selected: function(frm, cdt, cdn) {\r\n        update_item_details(frm, cdt, cdn);\r\n    }\r\n});\r\n\r\nfunction update_item_details(frm, cdt, cdn) {\r\n    let row = locals[cdt][cdn];\r\n\r\n    if (!row.item_code) {\r\n        frm.set_value('custom_available_qty_in_warehouse', 0);\r\n        frm.set_value('custom_available_qty_in_ed_warehouse', 0);\r\n        frm.set_value('custom_available_qty_in_fg_warehouse', 0);\r\n        frm.set_value('custom_selected_item_code', '');\r\n        return;\r\n    }\r\n\r\n    // Fetch and log item details\r\n    console.log(`Fetching details for item code: ${row.item_code}`);\r\n\r\n    // Fetch available quantity in CH-HO warehouse\r\n    frappe.call({\r\n        method: 'frappe.client.get_value',\r\n        args: {\r\n            doctype: 'Bin',\r\n            filters: {\r\n                item_code: row.item_code,\r\n                warehouse: 'CH-HO - PLIPL'\r\n            },\r\n            fieldname: ['actual_qty']\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                let available_qty_in_warehouse = r.message.actual_qty || 0;\r\n\r\n                frm.set_value('custom_available_qty_in_warehouse', available_qty_in_warehouse);\r\n\r\n                console.log(`Warehouse CH-HO - PLIPL: Available qty: ${available_qty_in_warehouse}`);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Fetch available quantity in ED-BR warehouse\r\n    frappe.call({\r\n        method: 'frappe.client.get_value',\r\n        args: {\r\n            doctype: 'Bin',\r\n            filters: {\r\n                item_code: row.item_code,\r\n                warehouse: 'ED-BR - PLIPL'\r\n            },\r\n            fieldname: 'actual_qty'\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                let available_qty_in_ed_warehouse = r.message.actual_qty || 0;\r\n                frm.set_value('custom_available_qty_in_ed_warehouse', available_qty_in_ed_warehouse);\r\n\r\n                console.log(`Warehouse ED-BR - PLIPL: Available qty: ${available_qty_in_ed_warehouse}`);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Fetch available quantity in Finished Goods warehouse\r\n    frappe.call({\r\n        method: 'frappe.client.get_value',\r\n        args: {\r\n            doctype: 'Bin',\r\n            filters: {\r\n                item_code: row.item_code,\r\n                warehouse: 'Finished Goods - PLIPL'\r\n            },\r\n            fieldname: 'actual_qty'\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                let available_qty_in_fg_warehouse = r.message.actual_qty || 0;\r\n                frm.set_value('custom_available_qty_in_fg_warehouse', available_qty_in_fg_warehouse);\r\n\r\n                console.log(`Warehouse Finished Goods - PLIPL: Available qty: ${available_qty_in_fg_warehouse}`);\r\n            }\r\n        }\r\n    });\r\n\r\n    // // Fetch total items for which Purchase Orders are raised but not delivered\r\n    // frappe.call({\r\n    //     method: 'frappe.client.get_list',\r\n    //     args: {\r\n    //         doctype: 'Purchase Order Item',\r\n    //         filters: {\r\n    //             item_code: row.item_code,\r\n    //             docstatus: 1,  // Consider only submitted Purchase Orders\r\n    //             parent: ['!=', frm.doc.name]  // Exclude the current Purchase Order\r\n    //         },\r\n    //         fields: ['sum(qty - received_qty) as pending_qty']\r\n    //     },\r\n    //     callback: function(r) {\r\n    //         if (r.message && r.message.length) {\r\n    //             let pending_qty = r.message[0].pending_qty || 0;\r\n    //             frm.set_value('custom_pending_qty_in_purchase_orders', pending_qty);\r\n\r\n    //             console.log(`Total pending qty in other Purchase Orders: ${pending_qty}`);\r\n    //         }\r\n    //     }\r\n    // });\r\n\r\n    frm.set_value('custom_selected_item_code', row.item_code);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2024-09-18 11:02:37.688024",
  "module": "Custom App",
  "name": "Material Request to Work Order",
  "script": "frappe.ui.form.on('Material Request', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.material_request_type === 'Material Transfer') {\r\n            if (!frm.page.buttons['Create Work Order']) {\r\n                frm.page.add_inner_button('Create Work Order', function() {\r\n                    var items = frm.doc.items || [];\r\n                    var item_boms = {};\r\n                    var promises = items.map(function(item) {\r\n                        return frappe.call({\r\n                            method: 'frappe.client.get_value',\r\n                            args: {\r\n                                doctype: 'Item',\r\n                                filters: { item_code: item.item_code },\r\n                                fieldname: 'default_bom'\r\n                            }\r\n                        }).then(function(response) {\r\n                            if (response.message) {\r\n                                item_boms[item.item_code] = response.message.default_bom;\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    Promise.all(promises).then(function() {\r\n                        frappe.prompt([\r\n                            {\r\n                                fieldname: 'items_table',\r\n                                fieldtype: 'Table',\r\n                                label: __('Select Items for Work Order'),\r\n                                reqd: 1,\r\n                                fields: [\r\n                                    {\r\n                                        fieldname: 'item_code',\r\n                                        fieldtype: 'Link',\r\n                                        options: 'Item',\r\n                                        label: __('Item Code'),\r\n                                        in_list_view: 1\r\n                                    },\r\n                                    {\r\n                                        fieldname: 'quantity',\r\n                                        fieldtype: 'Float',\r\n                                        label: __('Quantity'),\r\n                                        in_list_view: 1\r\n                                    },\r\n                                    {\r\n                                        fieldname: 'bom_no',\r\n                                        fieldtype: 'Link',\r\n                                        options: 'BOM',\r\n                                        label: __('Bill of Materials'),\r\n                                        in_list_view: 1,\r\n                                        default: function(row) {\r\n                                            return item_boms[row.item_code] || ''; \r\n                                        }\r\n                                    }\r\n                                ],\r\n                                data: items.map(function(item) {\r\n                                    return {\r\n                                        item_code: item.item_code,\r\n                                        quantity: item.stock_qty,\r\n                                        bom_no: item_boms[item.item_code] || ''\r\n                                    };\r\n                                })\r\n                            }\r\n                        ],\r\n                        function(values) {\r\n                            var selected_items = values.items_table.filter(function(item) {\r\n                                return item.__checked;\r\n                            });\r\n\r\n                            if (selected_items.length > 0) {\r\n                                selected_items.forEach(function(item) {\r\n                                    var work_order_data = {\r\n                                        doctype: 'Work Order',\r\n                                        production_item: item.item_code,\r\n                                        qty: item.quantity,\r\n                                        bom_no: item.bom_no,\r\n                                        material_request: frm.doc.name, \r\n                                    };\r\n                                    console.log('Work Order Data:', work_order_data);\r\n                                    frappe.call({\r\n                                        method: 'frappe.client.insert',\r\n                                        args: {\r\n                                            doc: work_order_data\r\n                                        },\r\n                                        callback: function(response) {\r\n                                            if (response.message) {\r\n                                                frappe.msgprint(__('Work Order created successfully.'));\r\n                                                frappe.set_route('Form', 'Work Order', response.message.name);\r\n                                            }\r\n                                        },\r\n                                        error: function(err) {\r\n                                            frappe.msgprint(__('Error creating Work Order: ' + err.message));\r\n                                        }\r\n                                    });\r\n                                });\r\n                            } else {\r\n                                frappe.msgprint(__('Please select at least one item.'));\r\n                            }\r\n                        },\r\n                        'Create Work Order',\r\n                        'Create'\r\n                        );\r\n                    });\r\n                }, 'Create');\r\n            }\r\n        } else {\r\n            if (frm.page.buttons['Create Work Order']) {\r\n                frm.page.remove_inner_button('Create Work Order', 'Create');\r\n            }\r\n        }\r\n    },\r\n\r\n    material_request_type: function(frm) {\r\n        frm.trigger('refresh');\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-09-18 11:02:15.686487",
  "module": "Custom App",
  "name": "Purchase Order Item Show",
  "script": "function ButtonFunction(selected_docs) {\r\n    let d = new frappe.ui.Dialog({\r\n        title: 'Purchase Order Details',\r\n        fields: [\r\n            {\r\n                label: 'Purchase Order Details',\r\n                fieldname: 'po_details_html',\r\n                fieldtype: 'HTML',\r\n            }\r\n        ],\r\n        primary_action_label: 'Close',\r\n        primary_action: function() {\r\n            d.hide();\r\n        }\r\n    });\r\n\r\n    let details_html = '';\r\n\r\n    selected_docs.forEach(function(doc) {\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'Purchase Order',\r\n                name: doc.name\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    details_html += `<h4>Purchase Order: ${r.message.name}</h4>`;\r\n                    details_html += `<p>Order Date: ${r.message.transaction_date}</p>`;\r\n                    details_html += `<p>Supplier: ${r.message.supplier}</p>`;\r\n                    \r\n                    details_html += '<table class=\"table table-bordered\">';\r\n                    details_html += '<tr><th>Item Code</th><th>Item Name</th><th>Quantity</th><th>Rate</th><th>Amount</th></tr>';\r\n                    r.message.items.forEach(function(item) {\r\n                        details_html += `<tr>\r\n                            <td>${item.item_code}</td>\r\n                            <td>${item.item_name}</td>\r\n                            <td>${item.qty} ${item.uom}</td>\r\n                            <td>${item.rate}</td>\r\n                            <td>${item.amount}</td>\r\n                        </tr>`;\r\n                    });\r\n                    details_html += '</table>';\r\n                    details_html += '<hr>'; \r\n\r\n                    d.fields_dict.po_details_html.$wrapper.html(details_html);\r\n                } else {\r\n                    d.fields_dict.po_details_html.$wrapper.html('<p>No items found.</p>');\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    d.show();\r\n}\r\n\r\nfrappe.listview_settings['Purchase Order'] = {\r\n    refresh: function(listview) {\r\n        listview.page.add_inner_button(\"View Items\", function() {\r\n            let selected_docs = listview.get_checked_items();\r\n\r\n            if (selected_docs.length > 0) {\r\n                ButtonFunction(selected_docs);\r\n            } else {\r\n                frappe.msgprint('Please select one or more Purchase Orders.');\r\n            }\r\n        });\r\n    },\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-09-18 11:02:30.690282",
  "module": "Custom App",
  "name": "View Items in Sales Invoice",
  "script": "frappe.listview_settings[\"Sales Invoice\"] = {\r\n\thide_name_column: true,\r\n\r\n\tbutton: {\r\n\t\tshow: function (doc) {\r\n\t\t\treturn __(\"View Items\");\r\n\t\t},\r\n\t\tget_label: function () {\r\n\t\t\treturn __(\"View Items\", null, \"Access\");\r\n\t\t},\r\n\t\tget_description: function (doc) {\r\n\t\t\treturn;\r\n\t\t},\r\n\t\taction: function (doc) {\r\n\t\t\tfrappe.call({\r\n\t\t\t\tmethod: \"frappe.client.get\",\r\n\t\t\t\targs: {\r\n\t\t\t\t\tdoctype: \"Sales Invoice\",\r\n\t\t\t\t\tname: doc.name\r\n\t\t\t\t},\r\n\t\t\t\tcallback: function (response) {\r\n\t\t\t\t\tif (response.message) {\r\n\t\t\t\t\t\tvar items = response.message.items;\r\n\t\t\t\t\t\tvar item_table = \"<table class='table table-bordered table-condensed' border='1' style='width: 100%;'><tr> \\\r\n\t\t\t\t\t\t<th style='width: 20%;'>Item Code</th> \\\r\n\t\t\t\t\t\t<th style='width: 30%;'>Item Name</th> \\\r\n\t\t\t\t\t\t<th style='width: 15%; text-align: right;'>Qty</th> \\\r\n\t\t\t\t\t\t<th style='width: 15%; text-align: right;'>Rate</th> \\\r\n\t\t\t\t\t\t<th style='width: 20%; text-align: right;'>Amount</th></tr>\";\r\n\t\t\t\t\r\n\t\t\t\t\t\titems.forEach(function (item) {\r\n\t\t\t\t\t\t\titem_table += \"<tr> \\\r\n\t\t\t\t\t\t\t<td style='width: 20%;'>\" + item.item_code + \"</td> \\\r\n\t\t\t\t\t\t\t<td style='width: 30%;'>\" + item.item_name + \"</td> \\\r\n\t\t\t\t\t\t\t<td style='width: 15%; text-align: right;'>\" + item.qty + \"&emsp;\" + item.uom + \"</td> \\\r\n\t\t\t\t\t\t\t<td style='width: 15%; text-align: right;'>\" + item.rate + \"</td> \\\r\n\t\t\t\t\t\t\t<td style='width: 20%; text-align: right;'>\" + item.amount + \"</td></tr>\";\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t\t\titem_table += \"</table>\";\r\n\r\n\t\t\t\t\t\tlet dialog = new frappe.ui.Dialog({\r\n\t\t\t\t\t\t\ttitle: \"Sales Invoice Items: \" + doc.name,\r\n\t\t\t\t\t\t\tsize: 'large',\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tdialog.$body.html(item_table);\r\n\t\t\t\t\t\tdialog.show();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t},\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-09-18 11:02:22.593218",
  "module": "Custom App",
  "name": "Purchase Invoice Show Item",
  "script": "frappe.listview_settings[\"Purchase Invoice\"] = {\r\n\thide_name_column: true,\r\n\r\n\tbutton: {\r\n\t\tshow: function (doc) {\r\n\t\t\treturn __(\"View Items\");\r\n\t\t},\r\n\t\tget_label: function () {\r\n\t\t\treturn __(\"View Items\", null, \"Access\");\r\n\t\t},\r\n\t\tget_description: function (doc) {\r\n\t\t\treturn;\r\n\t\t},\r\n\t\taction: function (doc) {\r\n\t\t\tfrappe.call({\r\n\t\t\t\tmethod: \"frappe.client.get\",\r\n\t\t\t\targs: {\r\n\t\t\t\t\tdoctype: \"Purchase Invoice\",\r\n\t\t\t\t\tname: doc.name\r\n\t\t\t\t},\r\n\t\t\t\tcallback: function (response) {\r\n\t\t\t\t\tif (response.message) {\r\n\t\t\t\t\t\tvar items = response.message.items;\r\n\t\t\t\t\t\tvar item_table = \"<table class='table table-bordered table-condensed' border='1' style='width: 100%;'><tr> \\\r\n\t\t\t\t\t\t<th style='width: 20%;'>Item Code</th> \\\r\n\t\t\t\t\t\t<th style='width: 30%;'>Item Name</th> \\\r\n\t\t\t\t\t\t<th style='width: 15%; text-align: right;'>Qty</th> \\\r\n\t\t\t\t\t\t<th style='width: 15%; text-align: right;'>Rate</th> \\\r\n\t\t\t\t\t\t<th style='width: 20%; text-align: right;'>Amount</th></tr>\";\r\n\t\t\t\t\r\n\t\t\t\t\t\titems.forEach(function (item) {\r\n\t\t\t\t\t\t\titem_table += \"<tr> \\\r\n\t\t\t\t\t\t\t<td style='width: 20%;'>\" + item.item_code + \"</td> \\\r\n\t\t\t\t\t\t\t<td style='width: 30%;'>\" + item.item_name + \"</td> \\\r\n\t\t\t\t\t\t\t<td style='width: 15%; text-align: right;'>\" + item.qty + \"&emsp;\" + item.uom + \"</td> \\\r\n\t\t\t\t\t\t\t<td style='width: 15%; text-align: right;'>\" + item.rate + \"</td> \\\r\n\t\t\t\t\t\t\t<td style='width: 20%; text-align: right;'>\" + item.amount + \"</td></tr>\";\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t\t\titem_table += \"</table>\";\r\n\r\n\t\t\t\t\t\tlet dialog = new frappe.ui.Dialog({\r\n\t\t\t\t\t\t\ttitle: \"Purchase Invoice Items: \" + doc.name,\r\n\t\t\t\t\t\t\tsize: 'large',\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tdialog.$body.html(item_table);\r\n\t\t\t\t\t\tdialog.show();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t},\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2024-09-18 11:01:40.740732",
  "module": "Custom App",
  "name": "Batc Entry for multiple items",
  "script": "frappe.ui.form.on('Purchase Receipt', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Upload Batch Details'), function() {\r\n            var $input = $('<input type=\"file\" accept=\".xlsx, .xls\">');\r\n            $input.on('change', function(event) {\r\n                var file = event.target.files[0];\r\n                if (file) {\r\n                    var reader = new FileReader();\r\n                    reader.onload = function(e) {\r\n                        try {\r\n                            var data = new Uint8Array(e.target.result);\r\n                            var workbook = XLSX.read(data, { type: 'array' });\r\n                            var sheetName = workbook.SheetNames[0];\r\n                            var sheet = workbook.Sheets[sheetName];\r\n                            var rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });\r\n\r\n                            console.log(\"Excel data read successfully:\", rows);\r\n\r\n                            rows.forEach((row, index) => {\r\n                                if (index > 0) { // Skip header\r\n                                    var [item_code, batch_no, qty] = row;\r\n\r\n                                    console.log(`Processing row: ${item_code}, ${batch_no}, ${qty}`);\r\n\r\n                                    let item_found = false;\r\n                                    frm.doc.items.forEach(item => {\r\n                                        if (item.item_code === item_code) {\r\n                                            item.batch_no = batch_no;\r\n                                            item.qty = qty;\r\n                                            item_found = true;\r\n                                        }\r\n                                    });\r\n\r\n                                    if (!item_found) {\r\n                                        let new_item = frm.add_child(\"items\");\r\n                                        new_item.item_code = item_code;\r\n                                        new_item.batch_no = batch_no;\r\n                                        new_item.qty = qty;\r\n                                    }\r\n\r\n                                    check_and_create_batch(batch_no, item_code);\r\n                                    update_or_create_serial_and_batch_bundle(batch_no, item_code);\r\n\r\n                                    frm.refresh_field('items');\r\n                                }\r\n                            });\r\n                        } catch (error) {\r\n                            console.error(\"Error reading or processing file:\", error);\r\n                        }\r\n                    };\r\n                    reader.readAsArrayBuffer(file);\r\n                }\r\n            });\r\n            $input.click();\r\n        });\r\n    }\r\n});\r\n\r\nfunction check_and_create_batch(batch_no, item_code) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Batch',\r\n            name: batch_no\r\n        },\r\n        callback: function(response) {\r\n            if (!response || !response.message) {\r\n                frappe.call({\r\n                    method: 'frappe.client.insert',\r\n                    args: {\r\n                        doc: {\r\n                            doctype: 'Batch',\r\n                            batch_id: batch_no,\r\n                            item: item_code\r\n                        }\r\n                    },\r\n                    callback: function(response) {\r\n                        if (response && response.message) {\r\n                            frappe.msgprint(__('New batch created: ' + batch_no));\r\n                        }\r\n                    },\r\n                    error: function(error) {\r\n                        console.error(\"Error creating batch:\", error);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        error: function(error) {\r\n            console.error(\"Error checking batch:\", error);\r\n        }\r\n    });\r\n}\r\n\r\nfunction update_or_create_serial_and_batch_bundle(purchase_receipt, batch_no, item_code) {\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Serial and Batch Bundle',\r\n            filters: {\r\n                item_code: item_code,\r\n                batch_no: batch_no // Replace with valid field\r\n            },\r\n            fields: ['name', 'item_code', 'batch_no'] // Use only allowed fields\r\n        },\r\n        callback: function(response) {\r\n            if (response && response.message && response.message.length > 0) {\r\n                // Existing bundles found, update them\r\n                console.log(`Existing bundles found for item_code ${item_code} and batch_no ${batch_no}:`, response.message);\r\n                response.message.forEach(bundle => {\r\n                    frappe.call({\r\n                        method: 'frappe.client.set_value',\r\n                        args: {\r\n                            doctype: 'Serial and Batch Bundle',\r\n                            name: bundle.name,\r\n                            fieldname: {\r\n                                batch_id: batch_no // Update fields as needed\r\n                            }\r\n                        },\r\n                        callback: function(res) {\r\n                            if (res && res.message) {\r\n                                frappe.msgprint(__('Serial and Batch Bundle updated: ' + bundle.name));\r\n                            }\r\n                        },\r\n                        error: function(error) {\r\n                            console.error(\"Error updating serial and batch bundle:\", error);\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                // No existing bundles found, create a new one\r\n                console.log(`No existing bundles found for item_code ${item_code} and batch_no ${batch_no}. Creating new bundle.`);\r\n                create_serial_and_batch_bundle(purchase_receipt, batch_no, item_code);\r\n            }\r\n        },\r\n        error: function(error) {\r\n            console.error(\"Error retrieving serial and batch bundle:\", error);\r\n        }\r\n    });\r\n}\r\n\r\nfunction create_serial_and_batch_bundle(purchase_receipt, batch_no, item_code) {\r\n    frappe.call({\r\n        method: 'frappe.client.insert',\r\n        args: {\r\n            doc: {\r\n                doctype: 'Serial and Batch Bundle',\r\n                item_code: item_code,\r\n                batch_id: batch_no,\r\n                // Include other required fields\r\n            }\r\n        },\r\n        callback: function(response) {\r\n            if (response && response.message) {\r\n                frappe.msgprint(__('New Serial and Batch Bundle created: ' + response.message.name));\r\n            }\r\n        },\r\n        error: function(error) {\r\n            console.error(\"Error creating serial and batch bundle:\", error);\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 }
]