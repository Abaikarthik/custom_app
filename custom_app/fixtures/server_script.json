[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-18 10:29:04.009746",
  "module": "Custom App",
  "name": "Approved User Name",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "# def on_submit(doc, method):\n#     submitter = frappe.session.user  # Get the user who is submitting the document\n#     doc.db_set('custom_submitted_by', submitter)  # Save it in the custom field\n\n# def sav(doc, method):\nif doc.workflow_state == 'Approved' and not doc.custom_submitted_by:\n    doc.custom_submitted_by = frappe.session.user\n        # doc.db_set('custom_submitted_by', submitter)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-18 10:28:56.345028",
  "module": "Custom App",
  "name": "Leave Application",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Leave Application",
  "script": "to_date = frappe.utils.getdate(doc.to_date)\nposting_date = frappe.utils.getdate(doc.posting_date)\n\n# Calculate the difference in days between the posting date and the leave date\ndays_difference = (posting_date - to_date).days\n\n# Check if the posting date is more than 4 days after the leave date\nif days_difference > 4:\n    frappe.throw(\"You cannot apply for leave. The deadline has expired.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-18 10:28:48.770028",
  "module": "Custom App",
  "name": "Address Autoname",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Address",
  "script": "if not doc.address_title:\r\n    if doc.links:\r\n        doc.address_title = doc.links[0].link_name\r\n\r\nif doc.address_title:\r\n    doc.name = frappe.utils.cstr(doc.address_title).strip()\r\n    \r\n    if frappe.db.exists(\"Address\", doc.name):\r\n        last_name = frappe.db.get_value(\"Address\", {\"name\": [\"like\", doc.name + \"-%\"]}, \"name\", order_by=\"creation desc\")\r\n        \r\n        if last_name:\r\n            last_number = int(last_name.split('-')[-1]) + 1\r\n            doc.name = f\"{doc.name}-{last_number}\"\r\n        else:\r\n            doc.name = f\"{doc.name}-1\"\r\nelse:\r\n    frappe.throw(_(\"Address Title is mandatory.\"))",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "testApi",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-18 10:28:30.786742",
  "module": "Custom App",
  "name": "API Test",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def uncheck_the_credit_limit():\r\n    try:\r\n        frappe.log_error(title=\"Scheduler Triggered\", message=\"Script execution started.\")\r\n        query = \"\"\"SELECT name FROM `tabCustomer Credit Limit` WHERE parenttype = 'Customer' AND bypass_credit_limit_check = 1\"\"\"\r\n        results = frappe.db.sql(query, as_dict=True)\r\n        if not results:\r\n            frappe.log_error(title=\"Query Result\", message=\"No records found where credit limit bypass is enabled.\")\r\n            frappe.response['message'] = \"No records found\"\r\n            return\r\n        obj={\r\n                \"bypass_credit_limit_check\": 0,\r\n                \"modified\": frappe.utils.now(),\r\n                \"modified_by\": \"Administrator\"\r\n            }\r\n        updated_customer=[]\r\n        # Loop through each record\r\n        for row in results:\r\n             frappe.db.set_value(\"Customer Credit Limit\", row['name'], obj)\r\n             res_obj=row\r\n             updated_customer.append(res_obj)\r\n        frappe.db.commit()\r\n        frappe.log_error(title=\"Customer Credit Limit Update\", message=\"Credit limit bypass disabled for relevant customers.\")\r\n        frappe.response['content'] = updated_customer\r\n    except Exception as e:\r\n        # Log any error encountered during execution\r\n        frappe.log_error(title=\"General Error\", message=f\"Error during script execution: {str(e)}\")\r\n        frappe.response['Error'] = str(e)\r\n\r\n# Execute the function\r\nuncheck_the_credit_limit()\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": "10 23 * * *",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Cron",
  "modified": "2024-09-18 10:28:39.830605",
  "module": "Custom App",
  "name": "Scheduler Test",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def uncheck_the_credit_limit():\r\n    try:\r\n        frappe.log_error(title=\"Scheduler Triggered\", message=\"Script execution started.\")\r\n        query = \"\"\"SELECT name FROM `tabCustomer Credit Limit` WHERE parenttype = 'Customer' AND bypass_credit_limit_check = 1\"\"\"\r\n        results = frappe.db.sql(query, as_dict=True)\r\n        if not results:\r\n            frappe.log_error(title=\"Query Result\", message=\"No records found where credit limit bypass is enabled.\")\r\n            return\r\n        # Loop through each record\r\n        for row in results:\r\n             frappe.db.set_value(\"Customer Credit Limit\", row['name'], {\r\n                \"bypass_credit_limit_check\": 0,\r\n                \"modified\": frappe.utils.now(),\r\n                \"modified_by\": \"Administrator\"\r\n            })\r\n        frappe.db.commit()\r\n        frappe.log_error(title=\"Customer Credit Limit Update\", message=\"Credit limit bypass disabled for relevant customers.\")\r\n    except Exception as e:\r\n        # Log any error encountered during execution\r\n        frappe.log_error(title=\"General Error\", message=f\"Error during script execution: {str(e)}\")\r\n\r\n# Execute the function\r\nuncheck_the_credit_limit()",
  "script_type": "Scheduler Event"
 }
]